/*
**  mod_database.c -- Apache sample database module
**  [Autogenerated via ``apxs -n database -g'']
**
**  To play with this sample module first compile it into a
**  DSO file and install it into Apache's modules directory
**  by running:
**
**    $ apxs -c -i mod_database.c
**
**  Then activate it in Apache's apache2.conf file for instance
**  for the URL /database in as follows:
**
**    #   apache2.conf
**    LoadModule database_module modules/mod_database.so
**    <Location /database>
**    SetHandler database
**    </Location>
**
**  Then after restarting Apache via
**
**    $ apachectl restart
**
**  you immediately can request the URL /database and watch for the
**  output of this module. This can be achieved for instance via:
**
**    $ lynx -mime_header http://localhost/database
**
**  The output should be similar to the following one:
**
**    HTTP/1.1 200 OK
**    Date: Tue, 31 Mar 1998 14:42:22 GMT
**    Server: Apache/1.3.4 (Unix)
**    Connection: close
**    Content-Type: text/html
**
**    The sample page from mod_database.c
*/
#include <unistd.h>
#include <syslog.h>
#include <fstream>
#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "ap_config.h"
#include "Id/Id.hpp"
#include "Database/Database.hpp"
#include "parser/parser.h"
#include "ApacheStream.hpp"
#include "Miscellaneous/Debug.hpp"
#include "ParseURI.hpp"

using namespace BeeFishDatabase;
using namespace BeeFishApache2;
using namespace BeeFishJSON;
using namespace BeeFishMisc;

using namespace std;

static void inputJSON(Database& database, Path path, request_rec *r);
static void outputJSON(Database& database, Path path, request_rec *r);
static void outputDocument(Path path, request_rec *r);
static void outputId(request_rec *r);

namespace BeeFishWebServer {
 
   
   
}

/* The sample content handler */
static int database_handler(request_rec *r)
{
   Debug debug;
   debug << now() << " "
         << r->connection->client_ip << " "
         << r->method << " "
         << HOST 
         << r->uri;
         
   if (r->args && strlen(r->args))
   {
      debug << "?" << r->args;
   }
   
   debug << "\r\n";
   debug.flush();
    
   std::string filename =
      WWW_ROOT_DIRECTORY;
   
   filename += r->uri;
   
   if (filename.find("..") != std::string::npos)
      return HTTP_INTERNAL_SERVER_ERROR;
      
   if (filename.find(".git") != std::string::npos)
      return HTTP_INTERNAL_SERVER_ERROR;
   if (std::filesystem::exists(filename))
   {
      return DECLINED;
   }
    
   Database database(DATABASE_FILENAME);
    
   
   BString error;
   
   optional<Path> _path = parseURI(
      database,
      error,
      r->connection->client_ip,
      r->uri,
      r->args
   );
   
   bool success = _path.has_value();
   
   if (!success)
   {
      
      ap_set_content_type(
       r, "application/json; charset=utf-8");
       
      ApacheStream stream(r);

      Variable reply =
         BeeFishScript::String(
            error
         );
         
      debug << now() << " " << reply << endl;
      
         
      stream << reply;
      stream.flush();
      
      return OK;
   }
   
   Path path = _path.value();

   if (strcmp(r->method, "GET") == 0)
   {
      if (r->uri && strcmp(r->uri, "/id") == 0)
      {
         outputId(r);
      }
      else if (!path.isDeadEnd())
      {
         outputJSON(database, path, r);

      }
      else
      {
         return HTTP_NOT_FOUND;
      }
      
   }
   else if (!strcmp(r->method, "POST")) {
      

      inputJSON(database, path, r);


   }
    

   return OK;

}

static void outputId(request_rec *r)
{

   ap_set_content_type(
       r, "application/json; charset=utf-8");
   std::string name;
   if (r->args && strlen(r->args))
      name = BString(r->args).decodeURI();
   else
      name = "ðŸ’‹";

   BeeFishId::Id id(name);

   ApacheStream stream(r);
   stream << "\"" << id.key() << "\"";
   stream.flush();

}

static void outputJSON(Database& database, Path path, request_rec *r)
{
   ap_set_content_type(
       r, "application/json; charset=utf-8");

   JSONPath index(path);
   ApacheStream stream(r);
   stream << index;
   stream.flush();
}

static void outputDocument(Path path, request_rec *r)
{
   ap_set_content_type(
       r, "application/json; charset=utf-8");

   ApacheStream stream(r);
   string posted;
   Size pageIndex;
   MinMaxPath document = path["document"];
   Stack stack(document);
   while (document.next(stack, pageIndex))
   {
      document[pageIndex]
          .getData(posted);

      stream << posted;
   }

   stream.flush();
}

static void inputJSON(Database& database, Path path, request_rec *r)
{

   Debug debug;
   
   bool isOk = true;
   string posted;
   int pageSize = getPageSize();
   char buffer[pageSize];
   Size pageCount = 0;
   
   if (!path.isDeadEnd())
   {
      path.clear();
   }
   
   JSONPathParser index(path);

   int ret_code = ap_setup_client_block(r, REQUEST_CHUNKED_ERROR);
   if (ret_code == OK)
   {
      long dataBytesRead;
      if (ap_should_client_block(r))
      {
         while (
             (index.result() == nullopt) &&
             (dataBytesRead =
                  ap_get_client_block(r, buffer, pageSize)) > 0)
         {
            posted =
                string(buffer, dataBytesRead);

            if (posted.size())
            {
               index.read(posted);
            }
         }
      }
   }

   index.eof();

   Variable reply;

   if (index.result() == true)
   {
      debug << now()
            << " Document Ok"
            << "\r\n";
      debug.flush();

      reply =
          BeeFishScript::String("Success");

   }
   else
   {

     // path.clear();

      Variable error =
          index.getError();

      reply =
          BeeFishScript::Object{
              {"error", error}
          };

      debug << now()
            << " Document failed "
            << reply
            << "\r\n"
            << flush;
      debug.flush();

   }

   ap_set_content_type(
       r, "application/json; charset=utf-8"
   );

   ApacheStream stream(r);

   stream << reply;
   stream.flush();

}

static void database_register_hooks(apr_pool_t *p)
{
   ap_hook_handler(database_handler, NULL, NULL, APR_HOOK_MIDDLE);
}

extern "C"
{
   /* Dispatch list for API hooks */
   module AP_MODULE_DECLARE_DATA database_module = {
       STANDARD20_MODULE_STUFF,
       NULL,                   /* create per-dir    config structures */
       NULL,                   /* merge  per-dir    config structures */
       NULL,                   /* create per-server config structures */
       NULL,                   /* merge  per-server config structures */
       NULL,                   /* table of config file commands       */
       database_register_hooks /* register hooks                      */
   };
}
