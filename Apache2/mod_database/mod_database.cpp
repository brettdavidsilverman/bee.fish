/* 
**  mod_database.c -- Apache sample database module
**  [Autogenerated via ``apxs -n database -g'']
**
**  To play with this sample module first compile it into a
**  DSO file and install it into Apache's modules directory 
**  by running:
**
**    $ apxs -c -i mod_database.c
**
**  Then activate it in Apache's apache2.conf file for instance
**  for the URL /database in as follows:
**
**    #   apache2.conf
**    LoadModule database_module modules/mod_database.so
**    <Location /database>
**    SetHandler database
**    </Location>
**
**  Then after restarting Apache via
**
**    $ apachectl restart
**
**  you immediately can request the URL /database and watch for the
**  output of this module. This can be achieved for instance via:
**
**    $ lynx -mime_header http://localhost/database 
**
**  The output should be similar to the following one:
**
**    HTTP/1.1 200 OK
**    Date: Tue, 31 Mar 1998 14:42:22 GMT
**    Server: Apache/1.3.4 (Unix)
**    Connection: close
**    Content-Type: text/html
**  
**    The sample page from mod_database.c
*/ 
#include <unistd.h>
#include <syslog.h>
#include <fstream>
#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "ap_config.h"

#include "Database/Database.hpp"
#include "parser/parser.h"
#include "ParseURI.hpp"
#include "ApacheStream.hpp"
#include "Miscellaneous/Debug.hpp"

using namespace BeeFishDatabase;
using namespace BeeFishWebServer;
using namespace BeeFishJSON;
using namespace BeeFishMisc;

using namespace std;

static int counter = 0;

static bool inputJSON(Path path, request_rec *r);
static bool outputJSON(Path path, request_rec *r);
static bool outputDocument(Path path, request_rec *r);
static Debug debug;
static mutex _mutex;

namespace BeeFishWebServer {
   Database database("/home/bee/bee.fish.data");

}

/* The sample content handler */
static int database_handler(request_rec *r)
{
    
    debug << now() << " "
          << r->connection->client_ip << " "
          << r->method << " "
          << HOST 
          << r->uri;
    
    if (r->args)
       debug << "?" << r->args;
       
    debug << endl;
 
    Path path = parseURI(
       r->connection->client_ip,
       r->uri
    );

    Variable result;
    
    if (!strcmp(r->method, "GET"))
    {
        if (!strcmp(r->uri, "/index.xhtml") ||
            !strcmp(r->uri, "/NotFound.xhtml") ||
            !strcmp(r->uri, "/error.js") ) {
           
           return DECLINED;
        }
        else if (path.contains("document") &&
                 path.contains("index"))
        {
           if (r->args) {
              std::string arguments(r->args);
              if (arguments == "document")
              {
                 if (!outputDocument(path, r))
                    return HTTP_INTERNAL_SERVER_ERROR;
                 else
                    return OK;
              }
           }
           
           if (!outputJSON(path, r))
              return HTTP_INTERNAL_SERVER_ERROR;
           else
              return OK;
           
        }
        
        return HTTP_NOT_FOUND; // NotFound.xhtml
        
    }
    else if (!strcmp(r->method, "POST")) {
        
       path.clear();
       
       if (inputJSON(path, r))
          return OK;

    }
    
   
    return HTTP_INTERNAL_SERVER_ERROR;
}

static bool outputJSON(Path path, request_rec *r)
{
   ap_set_content_type(
      r, "application/json; charset=utf-8"
   );
   
   Path2JSON index = path["index"];
   ApacheStream stream(r);
   stream << index;
   stream.flush();
   
   return true;
   
}

static bool outputDocument(Path path, request_rec *r)
{
   ap_set_content_type(
      r, "application/json; charset=utf-8"
   );
   
   ApacheStream stream(r);
   string posted;
   Size pageIndex;
   Stack stack;
   MinMaxPath document = path["document"];
   while (document.next(stack, pageIndex))
   {
      document[pageIndex]
         .getData(posted);
           
      stream << posted;
   }
   
   stream.flush();
   
   return true;
}

static bool inputJSON(Path path, request_rec *r) {
   
   bool isOk = true;
   string posted;
   int pageSize = getPageSize();
   char buffer[pageSize];
   Size pageIndex = 0;
   JSON2Path index(path["index"]);
   
   MinMaxPath document = path["document"];
   
   debug << now()
         << " Uploading document "
         << endl;
   
   int ret_code = ap_setup_client_block(r, REQUEST_CHUNKED_ERROR);
   if (ret_code == OK) {
      long dataBytesRead;
      if (ap_should_client_block(r))
      {
         while (
            (dataBytesRead =
             ap_get_client_block(r, buffer, pageSize))
             > 0)
         {
            posted =
               string(buffer, dataBytesRead);
               
            document[pageIndex++].setData(posted);
          
         }
      }
   }
   
   debug << now()
         << " Parsing document "
         << endl;
   
   Size maxPageIndex = pageIndex;
   
   Stack stack;
   while (document.next(stack, pageIndex))
   {
      document[pageIndex]
         .getData(posted);
           
      float percentage =
         ((float)pageIndex / (float)maxPageIndex) * 100.0;
         
      debug << now() << " "
            << percentage << "%" 
            << endl;
      
      if (index.read(posted) == false)
      {
         isOk == false;
         break;
      }
   }
   
   
   if (isOk)
   {
      index.eof();
   }
           
   Variable result;
   
   if (isOk == true &&
       index.result() == true)
   {
      debug << now()
            << " 100% Document Ok"
            << endl;
      
      result =
         BeeFishScript::String{
            "Success"
         };
   }
   else {
       
      Variable error =
         index.getErrorMessage();
         
      debug << now()
            << " Document failed "
            << error
            << endl;
      
      result =
         BeeFishScript::Object{
            {"error", error}
         };
         
      isOk = false;
   }
   
   ap_set_content_type(
      r, "application/json; charset=utf-8"
   );
   
   ApacheStream stream(r);
   
   stream << result;
   stream.flush();
   
   
   return isOk;
}

static void database_register_hooks(apr_pool_t *p)
{
    ap_hook_handler(database_handler, NULL, NULL, APR_HOOK_MIDDLE);
}

extern "C" {
   /* Dispatch list for API hooks */
   module AP_MODULE_DECLARE_DATA database_module = {
      STANDARD20_MODULE_STUFF, 
      NULL,                  /* create per-dir    config structures */
      NULL,                  /* merge  per-dir    config structures */
      NULL,                  /* create per-server config structures */
      NULL,                  /* merge  per-server config structures */
      NULL,                  /* table of config file commands       */
      database_register_hooks  /* register hooks                      */
  };
}
