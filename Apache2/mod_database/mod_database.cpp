/* 
**  mod_database.c -- Apache sample database module
**  [Autogenerated via ``apxs -n database -g'']
**
**  To play with this sample module first compile it into a
**  DSO file and install it into Apache's modules directory 
**  by running:
**
**    $ apxs -c -i mod_database.c
**
**  Then activate it in Apache's apache2.conf file for instance
**  for the URL /database in as follows:
**
**    #   apache2.conf
**    LoadModule database_module modules/mod_database.so
**    <Location /database>
**    SetHandler database
**    </Location>
**
**  Then after restarting Apache via
**
**    $ apachectl restart
**
**  you immediately can request the URL /database and watch for the
**  output of this module. This can be achieved for instance via:
**
**    $ lynx -mime_header http://localhost/database 
**
**  The output should be similar to the following one:
**
**    HTTP/1.1 200 OK
**    Date: Tue, 31 Mar 1998 14:42:22 GMT
**    Server: Apache/1.3.4 (Unix)
**    Connection: close
**    Content-Type: text/html
**  
**    The sample page from mod_database.c
*/ 
#include <unistd.h>
#include <syslog.h>
#include <fstream>
#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "ap_config.h"

#include "Database/Database.hpp"
#include "Parser/Parser.hpp"

#include "parseURI.hpp"
#include "JSON/JSON2Variable.hpp"
#include "JSON/JSON2Path.hpp"

using namespace BeeFishDatabase;
using namespace BeeFishWebServer;
using namespace BeeFishJSON;

using namespace std;

static int counter = 0;
static std::ofstream debug;
static Variable readJSON(Path path, request_rec *r);
static bool sendDocument(Path path, request_rec *r);

/* The sample content handler */
static int database_handler(request_rec *r)
{
    debug.open("/home/bee/debug.txt", std::ios_base::app);
   
    Path path = parseURI(r->uri);
    
    debug.close();
    
 
    Variable result;
    
    if (!strcmp(r->method, "GET"))
    {
        if (!strcmp(r->uri, "/index.xhtml") ||
            !strcmp(r->uri, "/NotFound.xhtml") ||
            !strcmp(r->uri, "/error.js") ) {
           
           return DECLINED;
        }
        else if (path.contains("document")) {

           if (sendDocument(path["document"], r))
              return OK;
           
           return HTTP_INTERNAL_SERVER_ERROR;
        }
        
        return HTTP_NOT_FOUND; // NotFound.xhtml
        
    }
    else if (!strcmp(r->method, "POST")) {
        
        
       Variable result =
          readJSON(path, r);
       
       stringstream stream;
       stream << result;
       
       ap_set_content_type(
          r, "application/json; charset=utf-8"
       );
       
       string output = stream.str();
       
       ap_rputs(output.c_str(), r);
       
       return OK;

    }
    
    /* Lastly, if there was a query string, let's print that too!
    if (r->args) {
        ap_rprintf(r, "Your query string was: %s", r->args);
    }
    */
   
    return HTTP_INTERNAL_SERVER_ERROR;
}

static bool sendDocument(Path path, request_rec *r)
{
   ap_set_content_type(
      r, "application/json; charset=utf-8"
   );
   
   
   JSON2Variable json;
   
   string posted;
   Size pageIndex;
   Stack stack;
   MinMaxPath document = path;
   while (document.next(stack, pageIndex))
   {
      document[pageIndex]
         .getData(posted);
           
     // ap_rputs(posted.c_str(), r);
      if (!json.read(posted))
         return false;
   }
   
   json.eof();
   
   // Write variable to output
   stringstream stream;
   stream << *(json._variable);
   string output = stream.str();
   
   if ( ap_rwrite(
           output.data(),
           output.length(),
           r )
       == output.length() )
   {
       return true;
   }
   
   return false;
}


static Variable readJSON(Path path, request_rec *r) {
   JSON2Path json(database);
   bool isOk = true;
   string posted;
   int pageSize = getpagesize();
   char buffer[pageSize];
   Size pageIndex = 0;
   Path document = path["document"];
   Path index = path["index"];
   
   int ret_code = ap_setup_client_block(r, REQUEST_CHUNKED_ERROR);
   if (ret_code == OK) {
      long dataBytesRead;
      if (ap_should_client_block(r))
      {
              
         while (
            (dataBytesRead =
             ap_get_client_block(r, buffer, pageSize))
             > 0)
         {
            isOk =
               json.read(buffer, dataBytesRead);
                    
            if (!isOk)
               break;

            posted =
               string(buffer, dataBytesRead);
               
            document[pageIndex++].setData(posted);
            
         }
      }
   }
   
   if (isOk)
   {
      json.eof();
   }
           
        
   if (isOk &&
       json._result == true)
   {
      
      return
         BeeFishScript::String{
            "Success"
         };
   }
   
   Variable error =
      json.getErrorMessage();
      
   return
      BeeFishScript::Object{
         {"error", error}
      };
   
}

static void database_register_hooks(apr_pool_t *p)
{
    ap_hook_handler(database_handler, NULL, NULL, APR_HOOK_MIDDLE);
}

extern "C" {
   /* Dispatch list for API hooks */
   module AP_MODULE_DECLARE_DATA database_module = {
      STANDARD20_MODULE_STUFF, 
      NULL,                  /* create per-dir    config structures */
      NULL,                  /* merge  per-dir    config structures */
      NULL,                  /* create per-server config structures */
      NULL,                  /* merge  per-server config structures */
      NULL,                  /* table of config file commands       */
      database_register_hooks  /* register hooks                      */
  };
}
