/* 
**  mod_database.c -- Apache sample database module
**  [Autogenerated via ``apxs -n database -g'']
**
**  To play with this sample module first compile it into a
**  DSO file and install it into Apache's modules directory 
**  by running:
**
**    $ apxs -c -i mod_database.c
**
**  Then activate it in Apache's apache2.conf file for instance
**  for the URL /database in as follows:
**
**    #   apache2.conf
**    LoadModule database_module modules/mod_database.so
**    <Location /database>
**    SetHandler database
**    </Location>
**
**  Then after restarting Apache via
**
**    $ apachectl restart
**
**  you immediately can request the URL /database and watch for the
**  output of this module. This can be achieved for instance via:
**
**    $ lynx -mime_header http://localhost/database 
**
**  The output should be similar to the following one:
**
**    HTTP/1.1 200 OK
**    Date: Tue, 31 Mar 1998 14:42:22 GMT
**    Server: Apache/1.3.4 (Unix)
**    Connection: close
**    Content-Type: text/html
**  
**    The sample page from mod_database.c
*/ 
#include <unistd.h>
#include <syslog.h>
#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "ap_config.h"

#include "Database/Database.hpp"
#include "Parser/Parser.hpp"

#include "parseURI.hpp"
#include "JSON/JSON.hpp"

using namespace BeeFishDatabase;
using namespace BeeFishWebServer;
using namespace BeeFishJSON;

using namespace std;

static int counter = 0;

/* The sample content handler */
static int database_handler(request_rec *r)
{
       
    Path path = parseURI(r->uri);
    
    string postedJSON;
           
    if (!strcmp(r->method, "GET")) {
        if (!strcmp(r->uri, "/index.xhtml") ||
            !strcmp(r->uri, "/NotFound.xhtml") ) {
            return DECLINED;
        }
        if (path.hasData()) {

           path.getData(postedJSON);
              
        }
        else
           return 404; // NotFound.html
        
    }
    else if ( !strcmp(r->method, "POST")) {
        
        int pageSize = getpagesize();
        char buffer[pageSize];
        bool isOk = true;
        JSON json;
        int ret_code = ap_setup_client_block(r, REQUEST_CHUNKED_ERROR);
        if (ret_code == OK) {
           long dataBytesRead;
           if (ap_should_client_block(r))
           {
              
              while (
                  (dataBytesRead = ap_get_client_block(r, buffer, pageSize))
                     > 0)
              {
                 isOk =
                    json.read(buffer, dataBytesRead);
                    
                 if (!isOk)
                    break;
                    
                 string str(buffer, dataBytesRead);
                 postedJSON += str;
              }
           }
        }
        
        if (isOk)
        {
            // Need to check for
            // unterminated numbers
            if (json._result == nullopt)
            {
                // Send eof to
                // handle unterminated
                // numbers
                json.eof();
            }
        }
           
        
        if (isOk &&
           json._result == true)
        {
           path.setData(postedJSON);
        }
        else
           return 500;
    }
    
    else {
        return 500;
    }
    
    ap_set_content_type(r, "application/json; charset=utf-8");

    ap_rputs(postedJSON.c_str(), r);

    /* Lastly, if there was a query string, let's print that too!
    if (r->args) {
        ap_rprintf(r, "Your query string was: %s", r->args);
    }
    */
    
    return OK;
}

static void database_register_hooks(apr_pool_t *p)
{
    ap_hook_handler(database_handler, NULL, NULL, APR_HOOK_MIDDLE);
}

extern "C" {
   /* Dispatch list for API hooks */
   module AP_MODULE_DECLARE_DATA database_module = {
      STANDARD20_MODULE_STUFF, 
      NULL,                  /* create per-dir    config structures */
      NULL,                  /* merge  per-dir    config structures */
      NULL,                  /* create per-server config structures */
      NULL,                  /* merge  per-server config structures */
      NULL,                  /* table of config file commands       */
      database_register_hooks  /* register hooks                      */
  };
}
